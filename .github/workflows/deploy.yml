name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Deploy to Vercel (Frontend)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'
        
    - name: Deploy to Railway (Backend)
      run: |
        # Install Railway CLI
        npm install -g @railway/cli
        
        # Deploy to Railway
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway link --project ${{ secrets.RAILWAY_PROJECT_ID }}
        railway up --service ${{ secrets.RAILWAY_SERVICE }}
        
    - name: Health Check
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        
        # Check frontend
        curl -f https://your-domain.vercel.app || echo "Frontend health check failed"
        
        # Check backend
        curl -f https://your-backend.railway.app/api/health || echo "Backend health check failed"
        
    - name: Notify Deployment Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "ðŸš€ Production deployment successful!"
        channel: '#deployments'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'staging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push staging image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to Staging Environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        
    - name: Notify Staging Deployment
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "ðŸ”§ Staging deployment successful!"
        channel: '#deployments'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback Job (Manual trigger)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event.inputs.rollback == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Rollback to Previous Version
      run: |
        echo "Rolling back to previous version..."
        # Add your rollback logic here
        
    - name: Notify Rollback
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "ðŸ”„ Rollback completed successfully!"
        channel: '#deployments'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 