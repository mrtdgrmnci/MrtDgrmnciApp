name: CI/CD Pipeline

on:
  push:
    branches: [ main, mrtv2 ]
  pull_request:
    branches: [ main, mrtv2 ]

env:
  NODE_VERSION: '18'
  NPM_VERSION: '9'

jobs:
  # Backend Testing Job
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Run backend tests
      working-directory: ./backend
      run: npm test
      
    - name: Run backend test coverage
      working-directory: ./backend
      run: npm run test:coverage
      
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Frontend Testing Job
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm run test:run
      
    - name: Run frontend test coverage
      working-directory: ./frontend
      run: npm run test:coverage
      
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  # Linting Job
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint || echo "No lint script found in backend"
      
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

  # Build Job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist
        retention-days: 7

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate
        cd backend && npm audit --audit-level=moderate
        cd ../frontend && npm audit --audit-level=moderate

  # Docker Build (for deployment)
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/mrtv2'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        tags: mrt-portfolio:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, lint, build, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Quality Gate Summary
      run: |
        echo "## ðŸŽ‰ Quality Gate Passed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "âœ… All tests passed" >> $GITHUB_STEP_SUMMARY
        echo "âœ… Code linting passed" >> $GITHUB_STEP_SUMMARY
        echo "âœ… Build successful" >> $GITHUB_STEP_SUMMARY
        echo "âœ… Security scan completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Ready for deployment!**" >> $GITHUB_STEP_SUMMARY 